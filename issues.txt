


Small:

+ grass grows back?
+ make sure refreshTile accounts for light level
+ make sure moon phase light levels work right
+ details view
+ add lighting
+ add "paused" tag
+ ghouls attack zombies
+ zombies attack stuff too
+ make it so fetch can require variable numbers?
+ prerequisite items for tasks
+ test and handle "multi-death"

- will of wisps
- drain life spell
- make it so moving torches move light
- attach a summary of item stacks method to master behavior
- how should bulk work?
  - items stacked with themselves should take less bulk...so like, if there's at least one odd-man-out, that should ruin things.
  - or, could we do that by making stacks take less bulk than the sum of their parts?  Yeah I think so.  "Instack" bulk.


- randomize growing times
- visibility of items and/or creatures under water
- some sort of position tracking (x/y) for survey mode
- stay in survey mode after designating?
- change no hauling to some other name or idea
- add a variety of articles and such to "describe()"
- scroll backwards through message history
- grass dies in shade?
- figure out asynchronous loading of resources
- queueing of zones?
- items have bulk



- something to make it so particle rendering isn't interrupted by normal rendering?
- make it so saving deals with all Types correctly
- consider going over to material/contour system
- clean up the covering up of old symbols
- make months shorter
- create a scheduler for periodic events, so not everything updates on the same turn

~
What's the detail view going to be like?

Tile:
  - What is it?
  - Is there a ceiling?
  - What are its properties?
  - What does building or digging do?
Creature:
  - What is it?
  - Whose team is it on?
  - What is it doing?
  - What materials is it made out of?
  - How good of shape is it in?
  - What's it carrying?
Items:
  - What's on the ground?
  - What can be done with it?
  - Is it owned?
Feature:
  - What's on the ground?
  - Can it be harvested?
  - Who owns it?
  - What else can be done with it?
Substance:
  - What is it?
  - What state is it in?
  - What does it do?
Zone:
  - What is it?
  - What does it do?
  - Who assigned it?
  - Who is it assigned to?
Other:
  - What is the lighting like?


Global status view:
  - How may zombies and other minions?...lets you zoom to it.
  - What all jobs are out there?  Also zoom, if it's assigned...or zoom to zone.
  - What items do you have in hoards?
  - What features and such have you built?

Maybe tab between those?  Esc to go back?

~

so I need to think about how menus work.
So the way it works currently is that...
1) ControlContexts control what the input does.
2) You directly render what the output does.
3) The structure of things is all in chains of callbacks.

So let's say I want to add a save/restore game option...maybe a system menu?
So I'd need to add a system menu Control Context (unless I wanted it to be a-z, in which case it's choosingMenu(heading, choices, callback(array item))
Then some of those choices have sub-menus, which need to be defined within the callback, right?  So maybe...implement this...and then try an alternate way.
So, what alternate ways are there?

One bad thing is that, unlike other lists, which are lists of game entities, this is a list of functions, that don't necessarily have the kind of representation
I've been assuming.

Also, and possibly related to this issue, the GUI .js file is horribly cluttered.  It has a hodgepodge of functions related to rendering, controls, and the like.
And this is largely because of namespace issues - I want to be able to access the same private namespace.  Which isn't really necessary, you know?  What are the private
things I'm accessing?  Not really anything that actually needs to be private.  You could stick them on objects like View and Control.

Some notes:
- Should I have a "menu stack?"
- Should I have mouse control as well?
- Should I separate the logical structure of the menu from its interface?

So, two types of menus:
- Static, with fixed functionality...usually a list of functions (save/restore game, quit, etc.)
- Dynamic, based on game state...usually a list of game entities (choose item from inventory, etc.)

* Dynamic menus will almost always be a-z, whereas static menus will probably have their own, specific key bindings.
* Dynamic menus will usually take a callback, and feed a menu choice to that callback, whereas static menus will bind a function to each choice.
* It's not always a stack of menus...sometimes it's controls beyond menus, sometimes the display doesn't change with the controls, and sometimes you don't nest.

I use the mouse *extensively*.  I'm not sure that's a good thing after all.

(just a note...light handling is killing performance.)
