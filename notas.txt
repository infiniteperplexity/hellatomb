Ummm...so what do I implement next in this game?
- patrol tasks
- integration of slopes with digging and building.
- action costs.
- durability / stamina / toughness
* reorganize
- add borders to GUI box dragSging.
- actual features moving forward
~
So what about actual features moving forward?  Well...
- Farming would be a big one....
- Mining would be a relatively small one.
- Attacks by nature spirits, fight back with spirtbind...
- Cultists, who must be impressed by...what?
-

~
Okay what about action costs?  This strikes me as premature optimization.  Period.
~
Okay what about this slope business?
So, one thing that would make sense is for digging holes to result in slopes rather than pits, and then to be able to dig into slopes.  Why?  Well, pro and con...
Pro:
- Fewer menu choices.
- Allows you to make slopes easily, going down.
- Allows you to rob graves intuitively.
- Won't get stuck at the bottom of pits.
Con:
- Requires two steps.
- Slopes are ugly.
So...what all would actually require these two steps?  We don't want this for same-level digging, only for level-below digging.  This requires splitting IncompletePit from IncompleteTunnel, and making the former have half the hit points of the later.  I just called them hit points; note that down.
So maybe only...pit traps?  Which maybe should be their own thing.  In any case, yeah I think we're okay with that.  Walls, on the other hand...I think that needs to be separate from slopes.  Although, arguably, extra work is a feature, not a bug.  For now, let's try the "slope-first" approach.
Patrol is easy.  Borders are maybe hard, it's a graphical thing.
~~~
Oh yeah, how big is GUI?
Aha, 12873.  That's even bigger than behavior.js.  So...what do we do?
Well...we could always split controls off from rendering.  display.js vs. controls.js.  I dunno, I'm assuming it's like half and half.  Oh, so what about encapsulation?  Well, there *are* a handful of things.  So...GUI can't see "main" and "survey".  Is there a way to handle that shit without exposing shit?
Well, the only thing that jumps straight to mind is the main vs survey issue.  So, in that case the GUI needs to know what control context we're in, not in order to know how to draw, but how to adjust the offsets.  Which is actually a bit fishy; the viewer shouldn't be...well...hold on.  Okay so let's say the offset was in the GUI rather than the control context.  Then the GUI, every time it rendered, would need to check...okay...ideally what would happen is that the gameplay would tell the control context who's boss.  But not really.  Okay I think what happens here is that every time the controller calls the renderer, it updates xoffset, yoffset, and z first  Gettin' maybe too drunk to handle that very well...
~
Okay so we put a fair amount of thought into that.
world has 7939
behaviors has 11347
commands has 6009
entity has 5914
path has 10989
tasks has 6191
Now...commands used to be worse.  So, the emotional breaking point is somewhere around 6000-6500 is my guess.
world is just barely above that.
path is way above that but it's forgiveable because there are a lot of comments and it's mostly one giant function.
behaviors is...getting ugly.
So the main things we might split up are world, behaviors, and path.  Conceptually, what do those things do.
Path has aStar, line, distance, and unimplemented flood fill stuff.  Basically, it's geometry.  Djikstra will go in there if and when I end up doing it.  "Path" is perhaps a poor name but it's coherent.
What happes in world?
We define terrain.
We create the master lists of entities and stuff.
We create and populate the world.
We provide some utility functions for modifying the world.
We provide some utility functions for accessing the world.
There are, I think, at least two coherent concepts here.  What do we got?
- A self-contained "World" that is actually the entire game area, complete with all its inhabitants.  Conceptually, you could have things outside this area.  Like if you traveled to another dimension, maybe time either wouldn't pass, or would pass differently, this the original area.  However, I would say there's another way things could go...we could have things happen outside the normal Z.  Hmmm...what would negative coords be like?  That doesn't work quite right, does it?  X and Y are inherently positive, but Z could be all over the place...that's no good because...yeah, honestly coords should follow the same system as the fastgrid.  Okay, well never mind that.
- Population.  All the routines that make there actually be stuff.  Creation!
- Terrain tiles.
- Tile manipulation, traversal, modification, etc.
Okay so I'm potentially seeing tiles.js (terrain and traversal / modification), and...I think other than that, we could eventually split the "container of the world" from the "population of the world" but we aren't there yet. everything.js, things.js, stuff.js, creation.js, buildstuff.js, populate.js...
HTomb.Things[levels, creatures, features, zones, items, init, coord,portals, fastgrid]...plus the populators.
Htomb.tiles[terrain, fillSquare, emptySquare, getSquare, symbolAt, neighbors, randomEmptyNeighbor
So I'm diggin' that split.
Then "behaviors" is the other thing.  And that gets ugly.  It's the longest of the long, so far.
AI: 1374
Movement: 3847
Worker: 1986
Between those three, we're at seven thousand out of eleven thousand.  All three of those, interestingly, have to do with AI.  Those are all creature behaviors.  So maybe we split creature behaviors off from all other behaviors?  cbehaviors.js versus behaviors.js?  With no real conceptual difference, other than the high degree of interactivity among many creature behaviors.  actions.js?

